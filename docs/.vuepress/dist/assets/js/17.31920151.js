(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{506:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("Boxx"),t._v(" "),a("h2",{attrs:{id:"deno是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deno是什么"}},[t._v("#")]),t._v(" Deno是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("A secure runtime for JavaScript and TypeScript.\nDeno是JavaScript / TypeScript运行时，具有安全的默认值和出色的开发人员经验。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("功能亮点")]),t._v(" "),a("ol",[a("li",[t._v("默认为安全。没有文件，网络或环境访问权限（除非明确启用）。")]),t._v(" "),a("li",[t._v("开箱即用地支持TypeScript。")]),t._v(" "),a("li",[t._v("只分发一个独立的可执行文件 (deno)。")]),t._v(" "),a("li",[t._v("有着内建的工具箱，比如一个依赖信息查看器 (deno info) 和一个代码格式化工具 (deno fmt)。")]),t._v(" "),a("li",[t._v("有一组经过审计的 标准模块，保证能在 Deno 上工作。")]),t._v(" "),a("li",[t._v("脚本代码能被打包为一个单独的 JavaScript 文件。")])])]),t._v(" "),a("li",[a("p",[t._v("与 Node.js 的比较")]),t._v(" "),a("ol",[a("li",[t._v("Deno 不使用 npm，而是使用 URL 或文件路径引用模块")])])]),t._v(" "),a("li",[a("p",[t._v("Hello World")])]),t._v(" "),a("li",[a("p",[t._v("Deno 是一个 JavaScript 和 TypeScript 的运行时，并尝试与浏览器兼容并使用现代的功能 (features)。")]),t._v(" "),a("ul",[a("li",[t._v("由于 Deno 具有浏览器兼容性，Hello World 程序与浏览器里的没有区别。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" deno run https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("deno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("land"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("examples"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("welcome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ts\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])]),t._v(" "),a("ul",[a("li",[t._v("发出一个 HTTP 请求")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Deno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1. 执行node的代码，把代码放入队列\n2. 事件循环程序（主线程）把队列里面的同步代码都先执行了，\n3. 同步代码执行完成，执行异步代码\n4. 异步代码分2种状况，\n")])])]),a("ul",[a("li",[t._v("异步非io setTimeout() setInterval()\n判断是否可执行，如果可以执行就执行，不可以跳过。")]),t._v(" "),a("li",[t._v("异步io 文件操作\n会从线程池当中去取一条线程，帮助主线程去执行。\n主线程会一直轮询，队列中没有代码了，主线程就会退出。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("子线程：被放在线程池里面的线程，用来执行异步io操作")]),t._v(" "),a("ol",[a("li",[t._v("在线程池里休息")]),t._v(" "),a("li",[t._v("异步io的操作来了，执行异步io操作。")]),t._v(" "),a("li",[t._v("子线程会把异步io操作的callback函数，扔回给队列")]),t._v(" "),a("li",[t._v("子线程会回到线程池了去休息。")]),t._v(" "),a("li",[t._v("callback 在异步io代码执行完成的时候被扔回主线程。")])])])]),t._v(" "),a("h2",{attrs:{id:"nodejs好在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs好在哪里"}},[t._v("#")]),t._v(" NodeJs好在哪里")]),t._v(" "),a("ol",[a("li",[t._v("统一前端开发体验")]),t._v(" "),a("li",[t._v("在处理高并发、I/O密集场景性能优势明显\n("),a("code",[t._v("文件操作")]),t._v(" "),a("code",[t._v("网络操作")]),t._v(" "),a("code",[t._v("数据库操作")]),t._v(")")])])],1)}),[],!1,null,null,null);s.default=n.exports}}]);